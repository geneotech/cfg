set laststatus=0
set ignorecase
set clipboard=unnamedplus
set backupdir=/tmp
set undodir=/tmp
set swapfile
set dir=/tmp

set nobackup
set noswapfile
set noundofile

" disable folding
set nofoldenable

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

set tabstop=4

" Don't know why but somehow this makes indentation work normally
" (puts just one tab instead of two)
set shiftwidth=4

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Let the window's title be the filename
set title

" Let us see relative line numbers by default
set number relativenumber
" set number

" Let us only see the filename
set titlestring="VIM"
nmap <S-e> :!ranger<CR>

" If the current buffer has never been saved, it will have no name,
" call the file browser to save it, otherwise just save it.
"command -nargs=0 -bar Update if &modified 
                           "\|    if empty(bufname('%'))
                           "\|        browse confirm write
                           "\|    else
                           "\|        confirm write
                           "\|    endif
                           "\|endif
"nnoremap <silent> <C-S> :<C-u>Update<CR>
"inoremap <c-s> <Esc>:Update<CR>

function! s:get_visual_selection()
    " Why is this not a built-in Vim script function?!
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

" Automatically opens the quickfix window after common commands
" and redraws the window to avoid glitches
"augroup myvimrc
    "autocmd!
    "autocmd QuickFixCmdPost [^l]* cwindow | redraw!
    "autocmd QuickFixCmdPost l* lwindow | redraw!
"augroup END

runtime plugin/grepper.vim
let g:grepper.dir = 'repo'
let g:grepper.highlight = 1
let g:grepper.tools = ['git']
let g:grepper.stop = 300

let g:grepper.operator.dir = 'repo'
let g:grepper.operator.highlight = 1
let g:grepper.operator.tools = ['git']
let g:grepper.operator.stop = 300

nmap <C-j> :tabprevious<CR>
nmap <C-k> :tabnext<CR>
nmap <silent> <S-j> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nmap <silent> <S-k> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>

" Search word under cursor
nmap <F4> :execute "Grepper -tool git -cword -noprompt"<CR>
" Search selection
vmap <F4>   <plug>(GrepperOperator)
" Standard CTRL+f search
nmap <C-f> :execute "Grepper -tool git -noprompt -query "<left>
" For motions
nmap gs  <plug>(GrepperOperator)

" vim-fugitive bindings 
map <C-l> :execute "silent Glog"<CR> 
map <C-s> :execute "Gstatus"<CR>
map <C-d> :execute "Gdiff"<CR>
map <C-C> :execute "Gcommit"<CR>
nmap <C-a> GVgg
nmap U :execute "GitGutterRevertHunk"<CR>

runtime plugin/gitgutter.vim
execute "GitGutterLineHighlightsEnable"
"execute "GitGutterSignsDisable"

" Prevent live updating of git gutter, it annoys me while writing
set updatetime=999999999

execute "set t_8f=\e[38;2;%lu;%lu;%lum"
execute "set t_8b=\e[48;2;%lu;%lu;%lum"

" Color fixes
set termguicolors

colorscheme moonfly
highlight LineNr ctermbg=black guibg=#080808
highlight CursorLineNR guibg=#080808 guifg=NONE
highlight TabLineFill guifg=#080808 guibg=#080807
highlight TabLineSel guibg=#202020 guifg=white
highlight TabLine guibg=#080808 

"highlight LineNr ctermbg=black guibg=black
"highlight CursorLineNR guibg=black guifg=NONE
"highlight Normal guibg=black
"colorscheme gryffin

highlight DiffAdd    ctermbg=16 guibg=#001c09 guifg=NONE
highlight DiffDelete ctermbg=17 guibg=#1c0000 guifg=NONE
highlight DiffChange ctermbg=17 guibg=#101010 guifg=NONE  
highlight DiffText   ctermbg=88 guibg=#050505 guifg=NONE  

highlight GitGutterAdd guifg=darkgreen 
highlight GitGutterChange guifg=darkyellow 
highlight GitGutterChangeDelete guifg=darkyellow 
highlight GitGutterDelete guifg=darkred

